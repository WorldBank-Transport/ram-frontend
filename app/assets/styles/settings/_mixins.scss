/* ==========================================================================
   Media queries
   ========================================================================== */

@mixin media($arg) {
  @if $arg == screen {
    @media #{$screen} { @content; }
  }
  @if $arg == landscape {
    @media #{$screen} and (orientation: landscape) { @content; }
  }
  @if $arg == portrait {
    @media #{$screen} and (orientation: portrait) { @content; }
  }
  @if $arg == xsmall-up {
    @media #{$screen} and (min-width: lower-bound($xsmall-range)) { @content; }
  }
  @if $arg == xsmall-only {
    @media #{$screen} and (max-width: upper-bound($xsmall-range)) { @content; }
  }
  @if $arg == small-up {
    @media #{$screen} and (min-width: lower-bound($small-range)) { @content; }
  }
  @if $arg == small-only {
    @media #{$screen} and (min-width: lower-bound($small-range)) and (max-width: upper-bound($small-range)) { @content; }
  }
  @if $arg == medium-up {
    @media #{$screen} and (min-width: lower-bound($medium-range)) { @content; }
  }
  @if $arg == medium-down {
    @media #{$screen} and (max-width: upper-bound($medium-range)) { @content; }
  }
  @if $arg == medium-only {
    @media #{$screen} and (min-width: lower-bound($medium-range)) and (max-width: upper-bound($medium-range)) { @content; }
  }
  @if $arg == large-up {
    @media #{$screen} and (min-width: lower-bound($large-range)) { @content; }
  }
  @if $arg == large-only {
    @media #{$screen} and (min-width: lower-bound($large-range)) and (max-width: upper-bound($large-range)) { @content; }
  }
  @if $arg == xlarge-up {
    @media #{$screen} and (min-width: lower-bound($xlarge-range)) { @content; }
  }
  @if $arg == xlarge-only {
    @media #{$screen} and (min-width: lower-bound($xlarge-range)) and (max-width: upper-bound($xlarge-range)) { @content; }
  }
  @if $arg == xxlarge-up {
    @media #{$screen} and (min-width: lower-bound($xxlarge-range)) { @content; }
  }
}


/* ==========================================================================
   Typography
   ========================================================================== */

@mixin heading($font-size, $max-media: small-up) {
  font-size: $font-size;
  line-height: $font-size + 0.5;

  @if $max-media == medium-up or $max-media == large-up or $max-media == xlarge-up {
    @include media(medium-up) {
      $font-size: $font-size + 0.25;
      font-size: $font-size;
      line-height: $font-size + 0.5;
    }
  }

  @if $max-media == large-up or $max-media == xlarge-up {
    @include media(large-up) {
      $font-size: $font-size + 0.25;
      font-size: $font-size;
      line-height: $font-size +  0.5;
    }
  }

  @if $max-media == xlarge-up {
    @include media(xlarge-up) {
      $font-size: $font-size + 0.25;
      font-size: $font-size;
      line-height: $font-size + 0.5;
    }
  }
}


/* ==========================================================================
   Buttons
   ========================================================================== */

@mixin button-variation($style, $brightness, $color) {
  $text-color: null;
  $bg-color: null;
  $bg-color-hover: null;
  $bg-color-active: null;
  $border-shadow-color: null;
  $inner-shadow-color: null;

  @if $style == "filled" {
    @if $brightness == "light" {
      $text-color: $link-color;
      $bg-color: $color;
      $bg-color-hover: shade($color, 2%);
      $bg-color-active: shade($color, 4%);
      $border-shadow-color: rgba($base-color, 0.16);
      $inner-shadow-color: rgba($base-color, 0.16);
    }
    @else if $brightness == "dark" {
      $text-color: #fff;
      $bg-color: $color;
      $bg-color-hover: shade($color, 4%);
      $bg-color-active: shade($color, 8%);
      $border-shadow-color: rgba($base-color, 0.16);
      $inner-shadow-color: rgba($base-color, 0.16);

      @extend .antialiased;
    }
    @else {
      @error "Invalid brightness property for button variation.";
    }
  }
  @else if $style == "bounded" or $style == "unbounded" {
    $text-color: $color;
    $bg-color: rgba($color, 0);
    $bg-color-hover: rgba($color, 0.08);
    $bg-color-active: rgba($color, 0.16);
    
    @if $style == "bounded" {
      box-shadow: inset 0 0 0 1px $border-shadow-color;
      .drop--open > &,
      &.button--active,
      &:active {
        box-shadow: inset 0 0 0 1px $border-shadow-color;
      }
    }
  }

  @else {
    @error "Invalid style property for button variation.";
  }

  background-color: $bg-color;
  box-shadow: 0 1px 2px 1px $inner-shadow-color;

  &, &:visited {
    color: $text-color;
  }
  &:hover {
    background-color: $bg-color-hover;
  }
  .drop--open > &,
  &.button--active,
  &.button--active:hover,
  &:active {
    background-color: $bg-color-active;
    box-shadow: inset 0 1px 2px 0 $inner-shadow-color;
  }
}